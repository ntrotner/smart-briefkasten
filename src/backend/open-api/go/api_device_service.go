/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"net/http"
	database_device "template_backend/database/paths/device"
	"template_backend/mqtt"
	openapi_common "template_backend/open-api/common"
)

// DeviceAPIService is a service that implements the logic for the DeviceAPIServicer
// This service should implement the business logic for every endpoint for the DeviceAPI API.
// Include any external packages or services that will be required by this service.
type DeviceAPIService struct {
}

// NewDeviceAPIService creates a default api service
func NewDeviceAPIService() DeviceAPIServicer {
	return &DeviceAPIService{}
}

// DeviceChangeOptionsPost - Modify options of device
func (s *DeviceAPIService) DeviceChangeOptionsPost(ctx context.Context, deviceOptions DeviceOptions, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device, err := openapi_common.IsDeviceAuthorized(ctx, r)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}
	options := database_device.DeviceOptions{
		Wifi: database_device.WifiOptions{
			SSID:     deviceOptions.Wifi.Ssid,
			Password: deviceOptions.Wifi.Password,
		},
		Kafka: database_device.KafkaOptions{
			URL: deviceOptions.Kafka.Url,
		},
	}

	err = database_device.UpdateDeviceOptions(ctx, device.Token, options)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	options.ID = device.ID
	json, err := json.Marshal(options)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "200", Message: "Error marshalling options"}}}), nil
	}

	err = mqtt.PublishOptions(string(json))
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "200", Message: err.Error()}}}), nil
	}
	return Response(200, Success{}), nil
}

// DeviceChangeStatePost - Modify state of device
func (s *DeviceAPIService) DeviceChangeStatePost(ctx context.Context, deviceState DeviceState, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device, err := openapi_common.IsDeviceAuthorized(ctx, r)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	state := database_device.DeviceChangeState{
		State:             database_device.DeviceState(deviceState.State),
		EmitPacktrapEvent: deviceState.EmitPacktrapEvent,
		EmitOpenEvent:     deviceState.EmitOpenEvent,
	}
	err = database_device.UpdateDeviceState(ctx, device.Token, state)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	state.ID = device.ID
	json, err := json.Marshal(state)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "200", Message: "Error marshalling state"}}}), nil
	}

	err = mqtt.PublishState(string(json))
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "200", Message: err.Error()}}}), nil
	}

	return Response(200, Success{}), nil
}

// DeviceGetOptionsGet - Get device options
func (s *DeviceAPIService) DeviceGetOptionsGet(ctx context.Context, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device, err := openapi_common.IsDeviceAuthorized(ctx, r)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	deviceOptions, err := database_device.GetDeviceOptions(ctx, device.Token)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	return Response(200, *deviceOptions), nil
}

// DeviceGetStateGet - Get device state
func (s *DeviceAPIService) DeviceGetStateGet(ctx context.Context, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device, err := openapi_common.IsDeviceAuthorized(ctx, r)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	deviceState, err := database_device.GetDeviceState(ctx, device.Token)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	return Response(200, *deviceState), nil
}
