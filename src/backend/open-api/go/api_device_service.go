/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	database_device "template_backend/database/paths/device"
	openapi_common "template_backend/open-api/common"
)

// DeviceAPIService is a service that implements the logic for the DeviceAPIServicer
// This service should implement the business logic for every endpoint for the DeviceAPI API.
// Include any external packages or services that will be required by this service.
type DeviceAPIService struct {
}

// NewDeviceAPIService creates a default api service
func NewDeviceAPIService() DeviceAPIServicer {
	return &DeviceAPIService{}
}

// DeviceChangeOptionsPost - Modify options of device
func (s *DeviceAPIService) DeviceChangeOptionsPost(ctx context.Context, deviceChangeOptions DeviceChangeOptions, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device, err := openapi_common.IsDeviceAuthorized(ctx, r)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	err = database_device.UpdateDeviceOptions(ctx, device.Token, database_device.DeviceOptions{
		Wifi: database_device.WifiOptions{
			SSID:     deviceChangeOptions.Wifi.Ssid,
			Password: deviceChangeOptions.Wifi.Password,
		},
		Kafka: database_device.KafkaOptions{
			URL: deviceChangeOptions.Kafka.Url,
		},
	})
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	return Response(200, Success{}), nil
}

// DeviceChangeStatePost - Modify state of device
func (s *DeviceAPIService) DeviceChangeStatePost(ctx context.Context, deviceChangeState DeviceChangeState, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device, err := openapi_common.IsDeviceAuthorized(ctx, r)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	state := database_device.DeviceChangeState{
		State:             database_device.DeviceState(deviceChangeState.State),
		EmitPacktrapEvent: deviceChangeState.EmitPacktrapEvent,
		EmitOpenEvent:     deviceChangeState.EmitOpenEvent,
	}
	err = database_device.UpdateDeviceState(ctx, device.Token, state)
	if err != nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	return Response(200, Success{}), nil
}
