/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	database_device "template_backend/database/paths/device"
	openapi_common "template_backend/open-api/common"

	"github.com/rs/zerolog/log"
)

// AuthenticationAPIService is a service that implements the logic for the AuthenticationAPIServicer
// This service should implement the business logic for every endpoint for the AuthenticationAPI API.
// Include any external packages or services that will be required by this service.
type AuthenticationAPIService struct {
}

// NewAuthenticationAPIService creates a default api service
func NewAuthenticationAPIService() AuthenticationAPIServicer {
	return &AuthenticationAPIService{}
}

// LoginPost - User login
func (s *AuthenticationAPIService) LoginPost(ctx context.Context, deviceLogin DeviceLogin, w http.ResponseWriter, r *http.Request) (ImplResponse, error) {
	device := database_device.AuthenticateDevice(ctx, deviceLogin.Token)

	if device == nil {
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	tokenString, _, err := database_device.CreateJWT(device)
	if err != nil {
		log.Error().Msg(err.Error())
		return Response(401, Error{ErrorMessages: []Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	openapi_common.WriteTokenToHeader(&tokenString, w)
	return Response(200, Success{}), nil
}
