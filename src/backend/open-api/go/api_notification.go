/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// NotificationAPIController binds http requests to an api service and writes the service results to the http response
type NotificationAPIController struct {
	service      NotificationAPIServicer
	errorHandler ErrorHandler
}

// NotificationAPIOption for how the controller is set up.
type NotificationAPIOption func(*NotificationAPIController)

// WithNotificationAPIErrorHandler inject ErrorHandler into controller
func WithNotificationAPIErrorHandler(h ErrorHandler) NotificationAPIOption {
	return func(c *NotificationAPIController) {
		c.errorHandler = h
	}
}

// NewNotificationAPIController creates a default api controller
func NewNotificationAPIController(s NotificationAPIServicer, opts ...NotificationAPIOption) Router {
	controller := &NotificationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotificationAPIController
func (c *NotificationAPIController) Routes() Routes {
	return Routes{
		"DeviceConsumeNotificationsGet": Route{
			strings.ToUpper("Get"),
			"/device/consume-notifications",
			c.DeviceConsumeNotificationsGet,
		},
	}
}

// DeviceConsumeNotificationsGet - Get device notifications
func (c *NotificationAPIController) DeviceConsumeNotificationsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DeviceConsumeNotificationsGet(r.Context(), w, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
